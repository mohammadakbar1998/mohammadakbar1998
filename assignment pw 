{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNzXHIVX/EvW/zGi2igSwTk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mohammadakbar1998/mohammadakbar1998/blob/main/assignment%20pw%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m2yAxa3H65dL"
      },
      "outputs": [],
      "source": [
        "# prompt: Explain the key features of Python that make it a popular choice for programming\n",
        "\n",
        "Python's popularity stems from a combination of factors:\n",
        "\n",
        "* **Readability and Simplicity:** Python emphasizes code readability with its clear syntax and consistent formatting conventions.  This makes it easier to learn, write, and maintain code, reducing development time and costs.  The use of indentation for code blocks, instead of braces or keywords, enforces consistent code style and makes it visually clear.\n",
        "\n",
        "* **Versatility and Extensive Libraries:** Python boasts a vast ecosystem of libraries and frameworks for diverse tasks.  From web development (Django, Flask) and data science (NumPy, Pandas, Scikit-learn) to machine learning (TensorFlow, PyTorch) and scripting, Python offers specialized tools for nearly any application.  This rich ecosystem reduces the need to write code from scratch, accelerating development.\n",
        "\n",
        "* **Large and Active Community:** A massive and active community of developers contributes to Python's growth and provides extensive support through forums, documentation, and readily available solutions to common problems.  This vibrant community ensures continuous development, improvement, and readily available help.\n",
        "\n",
        "* **Cross-Platform Compatibility:** Python runs on various operating systems (Windows, macOS, Linux) without requiring significant code modifications. This portability makes it ideal for projects needing to function across different platforms.\n",
        "\n",
        "* **Dynamic Typing:** Python uses dynamic typing, meaning you don't need to explicitly declare variable types. This simplifies code writing and makes it more flexible, but can sometimes introduce runtime errors if types are not carefully managed.\n",
        "\n",
        "* **Interpreted Language:** Python is an interpreted language, which means code is executed line by line, without the need for compilation. This facilitates quicker development cycles, as changes can be tested immediately.  However, it can also lead to slightly slower execution compared to compiled languages.\n",
        "\n",
        "* **Beginner-Friendly:**  The ease of learning and the vast online resources available make Python an excellent choice for beginners.  It's a great language to start with and transition to more complex languages later.\n",
        "\n",
        "* **Open Source and Free:** Python is open-source, meaning it's free to use, distribute, and modify. This makes it accessible to everyone and fosters community contributions.\n",
        "\n",
        "\n",
        "While Python's dynamic typing and interpreted nature can lead to performance limitations compared to some compiled languages, its advantages in terms of readability, versatility, and community support solidify its position as a leading choice for a wide range of programming tasks.\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Describe the role of predefined keywords in Python and provide examples of how they are used in a program\n",
        "\n",
        "#  Predefined keywords in Python are reserved words that have special meanings and purposes within the language.\n",
        "# They cannot be used as variable names, function names, or any other identifiers.  They form the building blocks\n",
        "# of Python's syntax and control program flow, data types, and object interactions.\n",
        "\n",
        "# Examples:\n",
        "\n",
        "# 1. Conditional statements (if, elif, else):\n",
        "x = 10\n",
        "if x > 5:\n",
        "    print(\"x is greater than 5\")\n",
        "elif x == 5:\n",
        "    print(\"x is equal to 5\")\n",
        "else:\n",
        "    print(\"x is less than 5\")\n",
        "\n",
        "# 2. Loops (for, while):\n",
        "for i in range(5):\n",
        "    print(i)\n",
        "\n",
        "i = 0\n",
        "while i < 5:\n",
        "    print(i)\n",
        "    i += 1\n",
        "\n",
        "# 3. Data type definitions (int, float, str, bool, list, tuple, dict, set):\n",
        "my_integer = 10  # int\n",
        "my_float = 3.14  # float\n",
        "my_string = \"Hello\"  # str\n",
        "my_boolean = True  # bool\n",
        "my_list = [1, 2, 3]  # list\n",
        "my_tuple = (1, 2, 3)  # tuple\n",
        "my_dict = {\"a\": 1, \"b\": 2}  # dict\n",
        "my_set = {1, 2, 3}  # set\n",
        "\n",
        "# 4. Function definition (def):\n",
        "def my_function(a, b):\n",
        "  return a + b\n",
        "\n",
        "result = my_function(5, 3)\n",
        "print(result)\n",
        "\n",
        "\n",
        "# 5. Class definition (class):\n",
        "class MyClass:\n",
        "    def __init__(self, value):\n",
        "        self.value = value\n",
        "\n",
        "my_object = MyClass(10)\n",
        "print(my_object.value)\n",
        "\n",
        "\n",
        "# 6. Control flow (break, continue, pass):\n",
        "for i in range(10):\n",
        "    if i == 5:\n",
        "        break  # Exit the loop\n",
        "    print(i)\n",
        "\n",
        "\n",
        "for i in range(10):\n",
        "    if i % 2 == 0:\n",
        "        continue # Skip even numbers\n",
        "    print(i)\n",
        "\n",
        "for i in range(10):\n",
        "    pass # Do nothing\n",
        "\n",
        "# 7. Exception Handling (try, except, finally):\n",
        "try:\n",
        "    result = 10 / 0\n",
        "except ZeroDivisionError:\n",
        "    print(\"Division by zero error\")\n",
        "finally:\n",
        "    print(\"This always executes\")\n",
        "\n",
        "# 8.  Other Keywords (import, from, as, in, is, not, and, or)\n",
        "\n",
        "import math\n",
        "from math import pi\n",
        "\n",
        "x = 10\n",
        "if x in [1,2,3,10]: # membership check\n",
        "  print('found')\n",
        "\n",
        "if type(x) is int:\n",
        "  print('is an integer')\n",
        "\n",
        "\n",
        "if (x > 5) and (x < 20):\n",
        "    print('x is in the range of (5,20)')\n",
        "\n",
        "if (x < 5) or (x > 20):\n",
        "    print('x is either < 5 or > 20')\n",
        "\n",
        "if not (x == 0):\n",
        "    print('x is not zero')"
      ],
      "metadata": {
        "id": "JyQW77eO7c6l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compare and contrast mutable and immutable objects in Python with examples\n",
        "\n",
        "# Immutable objects:\n",
        "# Once created, their value cannot be changed.  If you try to modify an immutable\n",
        "# object, a new object is created in memory.\n",
        "# Examples: int, float, string, tuple, bool\n",
        "\n",
        "# Mutable objects:\n",
        "# Their value can be changed after creation. Modifications are done in place.\n",
        "# Examples: list, dictionary, set\n",
        "\n",
        "\n",
        "# Examples demonstrating immutability:\n",
        "x = 5\n",
        "y = x  # y now points to the same memory location as x\n",
        "x = 10 # x is reassigned to a new memory location. y remains 5\n",
        "print(x)  # Output: 10\n",
        "print(y)  # Output: 5\n",
        "\n",
        "\n",
        "my_string = \"hello\"\n",
        "new_string = my_string.upper() # Creates a new string \"HELLO\", my_string is unchanged\n",
        "print(my_string)  # Output: hello\n",
        "print(new_string) # Output: HELLO\n",
        "\n",
        "my_tuple = (1,2,3)\n",
        "#my_tuple[0] = 4  # This will raise a TypeError because tuples are immutable\n",
        "\n",
        "# Examples demonstrating mutability:\n",
        "\n",
        "my_list = [1, 2, 3]\n",
        "my_list[0] = 4\n",
        "print(my_list) # Output: [4, 2, 3] (modification in place)\n",
        "\n",
        "\n",
        "my_dict = {\"a\":1, \"b\":2}\n",
        "my_dict[\"a\"] = 3\n",
        "print(my_dict) # Output: {'a': 3, 'b': 2} (modification in place)\n"
      ],
      "metadata": {
        "id": "qZuU1W8e7d8D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Discuss the different types of operators in Python and provide examples of how they are used\n",
        "\n",
        "# There are several types of operators in Python:\n",
        "\n",
        "# 1. Arithmetic Operators: These perform mathematical operations.\n",
        "#    + (Addition), - (Subtraction), * (Multiplication), / (Division), % (Modulo), ** (Exponentiation), // (Floor Division)\n",
        "\n",
        "x = 10\n",
        "y = 3\n",
        "\n",
        "print(x + y)   # Output: 13\n",
        "print(x - y)   # Output: 7\n",
        "print(x * y)   # Output: 30\n",
        "print(x / y)   # Output: 3.333...\n",
        "print(x % y)   # Output: 1\n",
        "print(x ** y)  # Output: 1000\n",
        "print(x // y)  # Output: 3\n",
        "\n",
        "\n",
        "# 2. Comparison Operators: These compare two values.\n",
        "#    == (Equal to), != (Not equal to), > (Greater than), < (Less than), >= (Greater than or equal to), <= (Less than or equal to)\n",
        "\n",
        "\n",
        "print(x == y)  # Output: False\n",
        "print(x != y)  # Output: True\n",
        "print(x > y)   # Output: True\n",
        "print(x < y)   # Output: False\n",
        "print(x >= y)  # Output: True\n",
        "print(x <= y)  # Output: False\n",
        "\n",
        "\n",
        "# 3. Logical Operators: These combine conditional statements.\n",
        "#    and (Logical AND), or (Logical OR), not (Logical NOT)\n",
        "\n",
        "a = True\n",
        "b = False\n",
        "\n",
        "print(a and b)  # Output: False\n",
        "print(a or b)   # Output: True\n",
        "print(not a)    # Output: False\n",
        "\n",
        "\n",
        "# 4. Assignment Operators: These assign values to variables.\n",
        "#    = (Assignment), += (Add and assign), -= (Subtract and assign), *= (Multiply and assign), /= (Divide and assign), %= (Modulo and assign), **= (Exponentiate and assign), //= (Floor divide and assign)\n",
        "\n",
        "z = 5\n",
        "z += 2   # Equivalent to z = z + 2\n",
        "print(z)   # Output: 7\n",
        "\n",
        "\n",
        "# 5. Bitwise Operators: These operate on individual bits of binary numbers.\n",
        "#    & (Bitwise AND), | (Bitwise OR), ^ (Bitwise XOR), ~ (Bitwise NOT), << (Left shift), >> (Right shift)\n",
        "\n",
        "\n",
        "# 6. Membership Operators: These test for membership in a sequence (like strings, lists, tuples).\n",
        "#    in, not in\n",
        "\n",
        "my_list = [1, 2, 3, 4, 5]\n",
        "\n",
        "print(3 in my_list)   # Output: True\n",
        "print(6 not in my_list) # Output: True\n",
        "\n",
        "\n",
        "# 7. Identity Operators: These compare the memory locations of two objects.\n",
        "#   is, is not\n",
        "\n",
        "p = 10\n",
        "q = 10\n",
        "\n",
        "print(p is q) # Output: True  (Integers in a certain range are interned)\n",
        "\n",
        "# Note:  For more complex objects, 'is' compares memory addresses, not values.\n",
        "\n",
        "\n",
        "# These are the basic types of operators in Python.\n",
        "# There are also other operators used with specific data types or functions, but these are the most commonly used."
      ],
      "metadata": {
        "id": "ZuwmrKm97eI_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"0 Explain the concept of type casting in Python with examples\"\n",
        "\n",
        "\n",
        "**Type casting** in Python refers to the conversion of one data type into another. Python provides built-in functions to convert between different types. Type casting is commonly done when you need to ensure that a value is treated as a specific type to perform operations, like arithmetic, string manipulation, or comparisons.\n",
        "\n",
        "### Types of Type Casting\n",
        "1. **Implicit Type Casting (Automatic Type Conversion)**\n",
        "2. **Explicit Type Casting (Manual Type Conversion)**\n",
        "\n",
        "### 1. **Implicit Type Casting (Automatic)**\n",
        "Implicit casting occurs when Python automatically converts one data type to another when it's needed. This generally happens when converting from a smaller data type to a larger data type, such as from `int` to `float`.\n",
        "\n",
        "#### Example:\n",
        "```python\n",
        "# Implicit casting from int to float\n",
        "num_int = 5\n",
        "num_float = num_int + 2.5  # Here, `num_int` is automatically converted to a float\n",
        "\n",
        "print(num_float)  # Output: 7.5\n",
        "print(type(num_float))  # Output: <class 'float'>\n",
        "```\n",
        "In this case, Python automatically converts `num_int` from `int` to `float` because the operation involves a `float`.\n",
        "\n",
        "### 2. **Explicit Type Casting (Manual)**\n",
        "Explicit type casting involves using Python’s built-in functions to convert one type to another. This is done by calling functions like:\n",
        "- `int()`: Converts to an integer\n",
        "- `float()`: Converts to a floating-point number\n",
        "- `str()`: Converts to a string\n",
        "- `list()`: Converts to a list\n",
        "- `tuple()`: Converts to a tuple\n",
        "- `bool()`: Converts to a boolean value\n",
        "\n",
        "#### Example 1: Converting from `float` to `int`\n",
        "```python\n",
        "# Explicit casting from float to int\n",
        "num_float = 7.8\n",
        "num_int = int(num_float)  # Converts 7.8 to 7\n",
        "\n",
        "print(num_int)  # Output: 7\n",
        "print(type(num_int))  # Output: <class 'int'>\n",
        "```\n",
        "Here, `int()` truncates the decimal part of the float, and converts it to an integer.\n",
        "\n",
        "#### Example 2: Converting from `string` to `int` or `float`\n",
        "```python\n",
        "# Converting string to int and float\n",
        "str_num = \"123\"\n",
        "int_num = int(str_num)  # Converts the string \"123\" to the integer 123\n",
        "float_num = float(str_num)  # Converts the string \"123\" to the float 123.0\n",
        "\n",
        "print(int_num)  # Output: 123\n",
        "print(float_num)  # Output: 123.0\n",
        "```\n",
        "\n",
        "#### Example 3: Converting from `int` to `string`\n",
        "```python\n",
        "# Converting int to string\n",
        "num = 42\n",
        "str_num = str(num)  # Converts the integer 42 to the string \"42\"\n",
        "\n",
        "print(str_num)  # Output: '42'\n",
        "print(type(str_num))  # Output: <class 'str'>\n",
        "```\n",
        "\n",
        "#### Example 4: Converting between `list` and `tuple`\n",
        "```python\n",
        "# Converting list to tuple and vice versa\n",
        "list_data = [1, 2, 3]\n",
        "tuple_data = tuple(list_data)  # Converts list to tuple\n",
        "list_from_tuple = list(tuple_data)  # Converts tuple back to list\n",
        "\n",
        "print(tuple_data)  # Output: (1, 2, 3)\n",
        "print(list_from_tuple)  # Output: [1, 2, 3]\n",
        "```\n",
        "\n",
        "### 3. **Handling Invalid Type Conversion**\n",
        "If you try to convert a value to an incompatible type, Python will raise an error. For example, converting a string that does not represent a number to an integer will result in a `ValueError`.\n",
        "\n",
        "#### Example:\n",
        "```python\n",
        "# Invalid conversion from string to int\n",
        "str_data = \"abc\"\n",
        "try:\n",
        "    int_data = int(str_data)\n",
        "except ValueError as e:\n",
        "    print(f\"Error: {e}\")  # Output: Error: invalid literal for int() with base 10: 'abc'\n",
        "```\n",
        "\n",
        "### Summary of Common Type Casting Functions:\n",
        "\n",
        "| Function  | Description                          | Example               |\n",
        "|-----------|--------------------------------------|-----------------------|\n",
        "| `int()`   | Converts to integer                  | `int(3.14)` → `3`     |\n",
        "| `float()` | Converts to float                    | `float(3)` → `3.0`    |\n",
        "| `str()`   | Converts to string                   | `str(42)` → `\"42\"`    |\n",
        "| `list()`  | Converts to list                     | `list((1, 2, 3))` → `[1, 2, 3]` |\n",
        "| `tuple()` | Converts to tuple                    | `tuple([1, 2, 3])` → `(1, 2, 3)` |\n",
        "| `bool()`  | Converts to boolean (`False` for 0, empty objects; `True` for others) | `bool(0)` → `False`, `bool(\"Hello\")` → `True` |\n",
        "\n",
        "### Conclusion\n",
        "Type casting in Python allows for more flexible data manipulation and operation. Implicit casting happens automatically in certain cases, while explicit casting requires you to use Python’s type conversion functions to manually convert data types. It's essential to be aware of type compatibility, especially when dealing with user input or dynamic data types."
      ],
      "metadata": {
        "id": "vWV9dnwW7eL6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# How do conditional statements work in Python? Illustrate with examples\n",
        "\n",
        "**Conditional statements** in Python are used to control the flow of execution based on certain conditions. These statements allow you to perform different actions depending on whether a condition is `True` or `False`. In Python, the primary conditional statements are `if`, `elif` (short for \"else if\"), and `else`.\n",
        "\n",
        "### Basic Structure of Conditional Statements\n",
        "\n",
        "```python\n",
        "if condition:\n",
        "    # Block of code to execute if condition is True\n",
        "elif another_condition:\n",
        "    # Block of code to execute if the previous condition is False, and this one is True\n",
        "else:\n",
        "    # Block of code to execute if all previous conditions are False\n",
        "```\n",
        "\n",
        "### Explanation:\n",
        "1. **`if` statement**: Tests the condition. If the condition is `True`, the code block inside the `if` statement is executed.\n",
        "2. **`elif` statement**: (Optional) Stands for \"else if\". If the preceding `if` or `elif` conditions are `False`, this condition is checked.\n",
        "3. **`else` statement**: (Optional) Runs if none of the previous conditions are `True`.\n",
        "\n",
        "### Examples\n",
        "\n",
        "#### 1. Basic `if` Statement\n",
        "```python\n",
        "age = 18\n",
        "\n",
        "if age >= 18:\n",
        "    print(\"You are an adult.\")\n",
        "```\n",
        "- **Explanation**: If the value of `age` is greater than or equal to 18, the message `\"You are an adult.\"` will be printed.\n",
        "\n",
        "#### 2. `if` and `else` Statements\n",
        "```python\n",
        "age = 16\n",
        "\n",
        "if age >= 18:\n",
        "    print(\"You are an adult.\")\n",
        "else:\n",
        "    print(\"You are a minor.\")\n",
        "```\n",
        "- **Explanation**: If `age` is less than 18, the message `\"You are a minor.\"` will be printed because the `if` condition is `False`.\n",
        "\n",
        "#### 3. `if`, `elif`, and `else` Statements\n",
        "```python\n",
        "age = 70\n",
        "\n",
        "if age < 18:\n",
        "    print(\"You are a minor.\")\n",
        "elif age >= 18 and age < 65:\n",
        "    print(\"You are an adult.\")\n",
        "else:\n",
        "    print(\"You are a senior citizen.\")\n",
        "```\n",
        "- **Explanation**: This program checks multiple conditions.\n",
        "  - If `age` is less than 18, it prints `\"You are a minor.\"`\n",
        "  - If `age` is between 18 and 64, it prints `\"You are an adult.\"`\n",
        "  - If `age` is 65 or older, it prints `\"You are a senior citizen.\"`\n",
        "\n",
        "#### 4. Nested `if` Statements\n",
        "```python\n",
        "age = 20\n",
        "is_student = True\n",
        "\n",
        "if age >= 18:\n",
        "    if is_student:\n",
        "        print(\"You are an adult and a student.\")\n",
        "    else:\n",
        "        print(\"You are an adult but not a student.\")\n",
        "else:\n",
        "    print(\"You are a minor.\")\n",
        "```\n",
        "- **Explanation**: Here, the `if` statement inside the first `if` block is a **nested `if` statement**. If `age` is 18 or more, it further checks whether the person is a student. Based on that, it prints the appropriate message.\n",
        "\n",
        "#### 5. Using `if` with Logical Operators\n",
        "Logical operators such as `and`, `or`, and `not` can be used in conditional statements to combine multiple conditions.\n",
        "\n",
        "- **`and`**: Both conditions must be `True` for the overall expression to be `True`.\n",
        "- **`or`**: At least one condition must be `True` for the overall expression to be `True`.\n",
        "- **`not`**: Reverses the Boolean value of the condition.\n",
        "\n",
        "Example with `and` and `or`:\n",
        "```python\n",
        "age = 25\n",
        "income = 50000\n",
        "\n",
        "if age >= 18 and income >= 30000:\n",
        "    print(\"You are eligible for the loan.\")\n",
        "else:\n",
        "    print(\"You are not eligible for the loan.\")\n",
        "```\n",
        "- **Explanation**: The condition `age >= 18 and income >= 30000` checks if both `age` and `income` meet the required criteria for eligibility. If both conditions are `True`, the message `\"You are eligible for the loan.\"` is printed. Otherwise, the message `\"You are not eligible for the loan.\"` is printed.\n",
        "\n",
        "Example with `or`:\n",
        "```python\n",
        "age = 17\n",
        "is_student = True\n",
        "\n",
        "if age < 18 or is_student:\n",
        "    print(\"You are eligible for a student discount.\")\n",
        "else:\n",
        "    print(\"You are not eligible for a student discount.\")\n",
        "```\n",
        "- **Explanation**: The `or` operator checks if either condition is `True`. Since the `is_student` variable is `True`, the person will be eligible for the student discount, even though they are under 18.\n",
        "\n",
        "#### 6. `if` with `not` Operator\n",
        "```python\n",
        "is_raining = False\n",
        "\n",
        "if not is_raining:\n",
        "    print(\"It's not raining. You can go outside!\")\n",
        "else:\n",
        "    print(\"It's raining. You should stay indoors.\")\n",
        "```\n",
        "- **Explanation**: The `not` operator reverses the Boolean value. If `is_raining` is `False`, the message `\"It's not raining. You can go outside!\"` will be printed.\n",
        "\n",
        "### Comparison Operators Used in Conditional Statements:\n",
        "- **`==`**: Equal to\n",
        "- **`!=`**: Not equal to\n",
        "- **`>`**: Greater than\n",
        "- **`<`**: Less than\n",
        "- **`>=`**: Greater than or equal to\n",
        "- **`<=`**: Less than or equal to\n",
        "\n",
        "Example:\n",
        "```python\n",
        "num = 5\n",
        "\n",
        "if num == 5:\n",
        "    print(\"The number is 5.\")\n",
        "elif num > 5:\n",
        "    print(\"The number is greater than 5.\")\n",
        "else:\n",
        "    print(\"The number is less than 5.\")\n",
        "```\n",
        "\n",
        "### Conclusion\n",
        "Conditional statements allow you to make decisions in your programs. By using `if`, `elif`, and `else`, you can execute different blocks of code based on conditions. Python also supports logical operators like `and`, `or`, and `not` to combine multiple conditions in a flexible way. Understanding and using conditional statements effectively is essential for controlling the flow of execution in your programs."
      ],
      "metadata": {
        "id": "kJbGMyZC7eOb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " Describe the different types of loops in Python and their use cases with examples.\n",
        "In Python, loops allow you to execute a block of code repeatedly, which is useful for tasks such as iterating over data, performing repeated calculations, or processing elements in a collection (like a list or a dictionary). There are three main types of loops in Python:\n",
        "\n",
        "1. **`for` loop**\n",
        "2. **`while` loop**\n",
        "3. **`nested` loops** (using `for` or `while` inside another loop)\n",
        "4. **`loop control statements`** (like `break`, `continue`, and `pass`)\n",
        "\n",
        "### 1. **`for` loop**\n",
        "The `for` loop is used for iterating over a sequence (such as a list, tuple, string, or range). It's ideal when the number of iterations is known or when you are iterating through items in a collection.\n",
        "\n",
        "#### Syntax:\n",
        "```python\n",
        "for variable in iterable:\n",
        "    # code block\n",
        "```\n",
        "\n",
        "- **`iterable`**: A collection (e.g., list, string, range) that is being iterated over.\n",
        "- **`variable`**: The variable that holds the value of each element in the iterable during each iteration.\n",
        "\n",
        "#### Example 1: Looping through a list\n",
        "```python\n",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "\n",
        "for fruit in fruits:\n",
        "    print(fruit)\n",
        "```\n",
        "- **Output**:\n",
        "  ```\n",
        "  apple\n",
        "  banana\n",
        "  cherry\n",
        "  ```\n",
        "\n",
        "#### Example 2: Looping with `range()` (useful for iteration with a specific number of times)\n",
        "```python\n",
        "for i in range(5):\n",
        "    print(i)\n",
        "```\n",
        "- **Output**:\n",
        "  ```\n",
        "  0\n",
        "  1\n",
        "  2\n",
        "  3\n",
        "  4\n",
        "  ```\n",
        "\n",
        "In the example above, `range(5)` generates numbers from 0 to 4 (it doesn't include the upper limit).\n",
        "\n",
        "#### Example 3: Looping through a string\n",
        "```python\n",
        "word = \"Python\"\n",
        "\n",
        "for letter in word:\n",
        "    print(letter)\n",
        "```\n",
        "- **Output**:\n",
        "  ```\n",
        "  P\n",
        "  y\n",
        "  t\n",
        "  h\n",
        "  o\n",
        "  n\n",
        "  ```\n",
        "\n",
        "#### Use Case:\n",
        "- **Iterating over elements in a collection (list, tuple, string, dictionary, etc.)**\n",
        "- **Performing a fixed number of iterations using `range()`**\n",
        "\n",
        "---\n",
        "\n",
        "### 2. **`while` loop**\n",
        "The `while` loop repeats a block of code as long as a given condition is `True`. It is used when the number of iterations is not predetermined and depends on a dynamic condition.\n",
        "\n",
        "#### Syntax:\n",
        "```python\n",
        "while condition:\n",
        "    # code block\n",
        "```\n",
        "\n",
        "- **`condition`**: The condition that is evaluated before each iteration. If it evaluates to `True`, the loop continues; if it evaluates to `False`, the loop stops.\n",
        "\n",
        "#### Example 1: Counting with a `while` loop\n",
        "```python\n",
        "count = 0\n",
        "while count < 5:\n",
        "    print(count)\n",
        "    count += 1\n",
        "```\n",
        "- **Output**:\n",
        "  ```\n",
        "  0\n",
        "  1\n",
        "  2\n",
        "  3\n",
        "  4\n",
        "  ```\n",
        "\n",
        "In this example, the loop continues as long as `count` is less than 5. The value of `count` is incremented in each iteration.\n",
        "\n",
        "#### Example 2: Infinite loop (usually avoided)\n",
        "```python\n",
        "while True:\n",
        "    print(\"This will run forever until stopped!\")\n",
        "    break  # To exit the infinite loop\n",
        "```\n",
        "\n",
        "- **Explanation**: In this example, the loop is infinite because `True` is always `True`, but it is terminated after one iteration with a `break` statement. Without the `break`, the loop would continue indefinitely.\n",
        "\n",
        "#### Use Case:\n",
        "- **When the number of iterations is not known beforehand**.\n",
        "- **To repeatedly perform a task until a certain condition is met** (e.g., waiting for user input, continuous data collection).\n",
        "\n",
        "---\n",
        "\n",
        "### 3. **`nested` loops**\n",
        "A **nested loop** is a loop inside another loop. This is useful when you need to perform more complex repetitive tasks, such as iterating over a list of lists (or multi-dimensional arrays).\n",
        "\n",
        "#### Syntax:\n",
        "```python\n",
        "for outer_variable in outer_iterable:\n",
        "    for inner_variable in inner_iterable:\n",
        "        # inner loop code\n",
        "    # outer loop code\n",
        "```\n",
        "\n",
        "#### Example: Nested `for` loop to print a matrix\n",
        "```python\n",
        "matrix = [\n",
        "    [1, 2, 3],\n",
        "    [4, 5, 6],\n",
        "    [7, 8, 9]\n",
        "]\n",
        "\n",
        "for row in matrix:\n",
        "    for element in row:\n",
        "        print(element, end=\" \")\n",
        "    print()\n",
        "```\n",
        "- **Output**:\n",
        "  ```\n",
        "  1 2 3\n",
        "  4 5 6\n",
        "  7 8 9\n",
        "  ```\n",
        "\n",
        "In this example, the outer loop iterates through each row of the matrix, while the inner loop iterates through the elements in each row.\n",
        "\n",
        "#### Example: Nested `while` loop\n",
        "```python\n",
        "i = 0\n",
        "while i < 3:\n",
        "    j = 0\n",
        "    while j < 3:\n",
        "        print(f\"i={i}, j={j}\")\n",
        "        j += 1\n",
        "    i += 1\n",
        "```\n",
        "- **Output**:\n",
        "  ```\n",
        "  i=0, j=0\n",
        "  i=0, j=1\n",
        "  i=0, j=2\n",
        "  i=1, j=0\n",
        "  i=1, j=1\n",
        "  i=1, j=2\n",
        "  i=2, j=0\n",
        "  i=2, j=1\n",
        "  i=2, j=2\n",
        "  ```\n",
        "\n",
        "#### Use Case:\n",
        "- **When working with multi-dimensional data structures like lists of lists or matrices**.\n",
        "- **Simulating complex workflows that require multiple nested steps.**\n",
        "\n",
        "---\n",
        "\n",
        "### 4. **Loop Control Statements**\n",
        "Python provides control statements that can modify the behavior of loops. These include:\n",
        "\n",
        "- **`break`**: Exits the loop immediately, regardless of the loop condition.\n",
        "- **`continue`**: Skips the current iteration and moves to the next iteration of the loop.\n",
        "- **`pass`**: A placeholder that does nothing; used when a statement is required syntactically but no action is needed.\n",
        "\n",
        "#### Example 1: Using `break`\n",
        "```python\n",
        "for i in range(10):\n",
        "    if i == 5:\n",
        "        break  # Exit the loop when i equals 5\n",
        "    print(i)\n",
        "```\n",
        "- **Output**:\n",
        "  ```\n",
        "  0\n",
        "  1\n",
        "  2\n",
        "  3\n",
        "  4\n",
        "  ```\n",
        "\n",
        "#### Example 2: Using `continue`\n",
        "```python\n",
        "for i in range(10):\n",
        "    if i % 2 == 0:\n",
        "        continue  # Skip even numbers\n",
        "    print(i)\n",
        "```\n",
        "- **Output**:\n",
        "  ```\n",
        "  1\n",
        "  3\n",
        "  5\n",
        "  7\n",
        "  9\n",
        "  ```\n",
        "\n",
        "#### Example 3: Using `pass`\n",
        "```python\n",
        "for i in range(3):\n",
        "    if i == 1:\n",
        "        pass  # Do nothing when i is 1\n",
        "    else:\n",
        "        print(i)\n",
        "```\n",
        "- **Output**:\n",
        "  ```\n",
        "  0\n",
        "  2\n",
        "  ```\n",
        "\n",
        "#### Use Cases for Loop Control Statements:\n",
        "- **`break`**: When you need to exit the loop early under certain conditions (e.g., find an item and stop searching).\n",
        "- **`continue`**: When you want to skip over certain iterations without exiting the loop (e.g., skip invalid data).\n",
        "- **`pass`**: Placeholder for unimplemented code or when a statement is required syntactically.\n",
        "\n",
        "---\n",
        "\n",
        "### Summary of Loop Types and Their Use Cases:\n",
        "\n",
        "| Loop Type      | Description                                               | Use Cases                                              |\n",
        "|----------------|-----------------------------------------------------------|--------------------------------------------------------|\n",
        "| `for` loop     | Iterates over a sequence (list, string, range, etc.).      | Iterating through items in a collection or known iterations. |\n",
        "| `while` loop   | Repeats as long as a condition is `True`.                 | Repeated tasks where the condition depends on dynamic factors. |\n",
        "| `nested` loop  | A loop inside another loop.                               | Working with multi-dimensional data structures or performing more complex repetitive tasks. |\n",
        "| `break`        | Exits the loop immediately.                               | To stop the loop early when a condition is met.        |\n",
        "| `continue`     | Skips the rest of the current loop iteration.             | To skip over unwanted iterations in the loop.          |\n",
        "| `pass`         | Placeholder that does nothing.                            | Used when no action is required in a loop or function. |\n",
        "\n",
        "Loops are a fundamental concept in programming, and understanding their different types and control statements helps you write more efficient and flexible code."
      ],
      "metadata": {
        "id": "q4omkJd07eQ7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "j-zKed967eTd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ciFTIWPo7eWJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hSwfadN57eYw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "quyJSk5I7ecN"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}